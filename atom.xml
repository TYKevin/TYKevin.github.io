<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Android 进阶指北</title>
  
  <subtitle>刻意练习，未来可期</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://TYKevin.github.io/"/>
  <updated>2019-12-03T16:40:54.067Z</updated>
  <id>http://TYKevin.github.io/</id>
  
  <author>
    <name>童煜</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重构登录管理 - AOP 思想在 Android 中的应用</title>
    <link href="http://TYKevin.github.io/2019/12/03/android/aop-in-android/"/>
    <id>http://TYKevin.github.io/2019/12/03/android/aop-in-android/</id>
    <published>2019-12-03T14:39:39.000Z</published>
    <updated>2019-12-03T16:40:54.067Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是AOP？"><a href="#什么是AOP？" class="headerlink" title="什么是AOP？"></a>什么是AOP？</h2><p>首先我们需要来了解下，什么是 AOP？AOP 全名是 Aspect Oriented Programming, 即面向切面编程。我认为 AOP 是在 OOP 思想上的延续。我们可以通过 利用 AOP，对很多重复的业务在横向切掉并抽离出来，例如日志打印，埋点统计，以及我们今天的例子登录管理等等。AOP 在 Java 后端中非常普及了，今天我们从一个例子由浅入深，来看看 AOP 在 Android 中可以如何应用。</p><p>首先我们从例子入手：我们现在有个需求，需要在数据插入数据库之前都对数据进行一次保存操作，如果在没有接触 AOP 之前，我们是如何操作呢？这里我么来简单的举个例子:</p><h2 id="运行时织入：通过动态代理实现-AOP"><a href="#运行时织入：通过动态代理实现-AOP" class="headerlink" title="运行时织入：通过动态代理实现 AOP"></a>运行时织入：通过动态代理实现 AOP</h2><p>假设我们有个数据库操作接口 <code>DBOperation</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DBOperation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后有个 Activity, 有个按钮模拟点击后，操作数据库，如果要实现需求，我们必须在每次操作前都调用一遍 <code>db.save()</code>  方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">DBOperation</span>, <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</span><br><span class="line">    <span class="keyword">private</span> DBOperation db;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        db = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.btn_operationDb).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">databaseOperating</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        db.save();</span><br><span class="line">        db.insert();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"数据库操作：insert()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"数据库操作：delete()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"数据库操作：update()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"数据库操作：save()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> viewId = v.getId();</span><br><span class="line">        <span class="keyword">switch</span> (viewId) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_operationDb:</span><br><span class="line">                databaseOperating(v);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果像例子中只有一次还好，如果每次要多次调用数据库的情况，则会造成代码的冗余以及有可能造成的遗忘。所以我们有没有办法在我们调用 insert/delete/update 的方法前就自动的调用一下 <code>save()</code> 方法呢？ 当然是有的，请看下面：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">DBOperation</span>, <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</span><br><span class="line">    <span class="keyword">private</span> DBOperation db;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.btn_operationDb).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        db = (DBOperation) Proxy.newProxyInstance(DBOperation.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;DBOperation.class&#125;, <span class="keyword">new</span> DBHandler(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> view</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">databaseOperating</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        db.insert();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"数据库操作：insert()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"数据库操作：delete()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"数据库操作：update()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"数据库操作：save()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> viewId = v.getId();</span><br><span class="line">        <span class="keyword">switch</span> (viewId) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_operationDb:</span><br><span class="line">                databaseOperating(v);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动态代理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DBHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> DBOperation db;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DBHandler</span><span class="params">(DBOperation dbOperation)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.db = dbOperation;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(db != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">"save"</span>.equals(method.getName())) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">"操作数据库之前，开始备份。。。"</span>);</span><br><span class="line">                    save();</span><br><span class="line">                    Log.d(TAG, <span class="string">"数据库备份完成。。。"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> method.invoke(db, args);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的代码中使用到了 Java 的动态代理，在每次调用 <code>DBOperation</code> 接口中的方法时，都会去自动调用一遍 <code>save()</code> 方法，如此一来，我们在代码中只要调用到了 insert/update/delete 方法，则自动就会调用 <code>save()</code> 方法，这就是一个简单的 AOP 的实现，将 save 的操作 “横切” 出来，做成一个整体， 在 <strong>运行时织入</strong> 代码。</p><h2 id="编译时织入：通过-AspectJ-实现集中式登录框架"><a href="#编译时织入：通过-AspectJ-实现集中式登录框架" class="headerlink" title="编译时织入：通过 AspectJ 实现集中式登录框架"></a>编译时织入：通过 AspectJ 实现集中式登录框架</h2><p>那么除了上面运行时织入代码的方法，我们还能将”切出来的代码” 在编译时织入，在类加载时织入。下面我们着重介绍下今天的主角，AspectJ 框架。这是一个功能非常强大且好用的 AOP 框架，AspectJ 可以替代 javac 完成编译工作，并支持在编译期生成 class 文件时将代码织入对应的切入点。下面我们还是从实际的例子出发，来看看 AspectJ 在 Android 中如何应用的。</p><p>我们都非常清楚 APP 登录判断是个最常见不过的操作了，没有使用 AOP 之前，我们每次需要用户登录权限的操作前都要先去判断一下是否有登录，然后如果没有登录则进行跳转，我们有没有办法在一个地方对这个判断进行集中处理呢？</p><p>首先，我们需要搞清楚几个概念：</p><ol><li>连接点(Joint point)：所有的目标方法都是连接点</li><li>切入点(PointCut)：通过使用特定的表达式 过滤出来的 需要切入 Advice 的切入点，即所有连接点的集合。</li><li>通知(Advice)：Advice 向代码中植入 的实现方法（Before（前置）、After（后置） 、 Around（环绕））。</li><li>切面(Aspect): 由 PointCut  和 Advice 组成一个切面。</li></ol><p>光看这些概念性的东西肯定是不知所以然，下面我们来一步步的通过代码使用 AspectJ 来实现：</p><h4 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h4><p>在 Application 的 <code>build.gradle</code> 中添加插件<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">            classpath <span class="string">'com.android.tools.build:gradle:3.2.1'</span></span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 添加 aspectj 对应的插件</span></span><br><span class="line">            classpath <span class="string">'org.aspectj:aspectjtools:1.8.9'</span></span><br><span class="line">            classpath <span class="string">'org.aspectj:aspectjweaver:1.8.9'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="APP-编译设置"><a href="#APP-编译设置" class="headerlink" title="APP 编译设置"></a>APP 编译设置</h4><p>在 app 的 <code>build.gradle</code> 中添加引用包，并设置编译时使用的插件，以及添加编译支持代码。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">buildscript &#123; <span class="comment">// 编译时用Aspect专门的编译器，不再使用传统的javac</span></span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'org.aspectj:aspectjtools:1.8.9'</span></span><br><span class="line">        classpath <span class="string">'org.aspectj:aspectjweaver:1.8.9'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">29</span></span><br><span class="line">    buildToolsVersion <span class="string">"29.0.2"</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.example.myapplication"</span></span><br><span class="line">        minSdkVersion <span class="number">23</span></span><br><span class="line">        targetSdkVersion <span class="number">29</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"androidx.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android-optimize.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>])</span><br><span class="line">    implementation <span class="string">'androidx.appcompat:appcompat:1.1.0'</span></span><br><span class="line">    implementation <span class="string">'androidx.constraintlayout:constraintlayout:1.1.3'</span></span><br><span class="line">    implementation <span class="string">'com.google.android.material:material:1.0.0'</span></span><br><span class="line">    implementation <span class="string">'androidx.annotation:annotation:1.0.2'</span></span><br><span class="line">    implementation <span class="string">'androidx.lifecycle:lifecycle-extensions:2.0.0'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation <span class="string">'androidx.test.ext:junit:1.1.1'</span></span><br><span class="line">    androidTestImplementation <span class="string">'androidx.test.espresso:espresso-core:3.2.0'</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">'org.aspectj:aspectjrt:1.8.13'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译支持</span></span><br><span class="line"><span class="keyword">import</span> org.aspectj.bridge.IMessage</span><br><span class="line"><span class="keyword">import</span> org.aspectj.bridge.MessageHandler</span><br><span class="line"><span class="keyword">import</span> org.aspectj.tools.ajc.Main</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">def</span> log = project.logger</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">def</span> variants = project.android.applicationVariants</span><br><span class="line"></span><br><span class="line">variants.all &#123; variant -&gt;</span><br><span class="line">    <span class="keyword">if</span> (!variant.buildType.isDebuggable()) &#123;</span><br><span class="line">        log.debug(<span class="string">"Skipping non-debuggable build type '$&#123;variant.buildType.name&#125;'."</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    JavaCompile javaCompile = variant.javaCompile</span><br><span class="line">    javaCompile.doLast &#123;</span><br><span class="line">        String[] args = [<span class="string">"-showWeaveInfo"</span>,</span><br><span class="line">                         <span class="string">"-1.8"</span>,</span><br><span class="line">                         <span class="string">"-inpath"</span>, javaCompile.destinationDir.toString(),</span><br><span class="line">                         <span class="string">"-aspectpath"</span>, javaCompile.classpath.asPath,</span><br><span class="line">                         <span class="string">"-d"</span>, javaCompile.destinationDir.toString(),</span><br><span class="line">                         <span class="string">"-classpath"</span>, javaCompile.classpath.asPath,</span><br><span class="line">                         <span class="string">"-bootclasspath"</span>, project.android.bootClasspath.join(File.pathSeparator)]</span><br><span class="line">        log.debug <span class="string">"ajc args: "</span> + Arrays.toString(args)</span><br><span class="line"></span><br><span class="line">        MessageHandler handler = <span class="keyword">new</span> MessageHandler(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">new</span> Main().run(args, handler);</span><br><span class="line">        <span class="keyword">for</span> (IMessage <span class="string">message :</span> handler.getMessages(<span class="literal">null</span>, <span class="literal">true</span>)) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (message.getKind()) &#123;</span><br><span class="line">                <span class="keyword">case</span> IMessage.<span class="string">ABORT:</span></span><br><span class="line">                <span class="keyword">case</span> IMessage.<span class="string">ERROR:</span></span><br><span class="line">                <span class="keyword">case</span> IMessage.<span class="string">FAIL:</span></span><br><span class="line">                    log.error message.message, message.thrown</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> IMessage.<span class="string">WARNING:</span></span><br><span class="line">                    log.warn message.message, message.thrown</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> IMessage.<span class="string">INFO:</span></span><br><span class="line">                    log.info message.message, message.thrown</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> IMessage.<span class="string">DEBUG:</span></span><br><span class="line">                    log.debug message.message, message.thrown</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上准备工作做好了，下面进入正餐。</p><h4 id="新增连接点标示"><a href="#新增连接点标示" class="headerlink" title="新增连接点标示"></a>新增连接点标示</h4><p>此处的连接点标示我们使用自定义注解来进行标注<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LoginCheck &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="添加连接点"><a href="#添加连接点" class="headerlink" title="添加连接点"></a>添加连接点</h4><p>我们将用上一步的注解，在我们需要进行登录确认的方法前进行标示，例如如下方法会跳转我的专区页面，但是需要用户登录后才能跳转，我们则在这个方法上加上我们之前的注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需要登录后操作，未登陆需要跳转登录界面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> view</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@LoginCheck</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">area</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    Log.d(TAG, <span class="string">"跳转到我的专区界面"</span>);</span><br><span class="line">    startActivity(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, MainActivity.class));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么如何让这个注解起作用呢？重点就在下一步，添加切面。</p><h4 id="添加切面"><a href="#添加切面" class="headerlink" title="添加切面"></a>添加切面</h4><p>我们新建一个类作为切面，其中包含了 切入点（PointCut）和 环绕通知（Around）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过 <span class="doctag">@Aspect</span> 注解表明此类为一个切面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginCheckAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义切入点，通过 execution 语法定义哪些方法为切入点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(@com.example.myapplication.example_login.aop.LoginCheck * *(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methondPointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"methondPointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">joinPoint</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Context context = (Context) joinPoint.getThis();</span><br><span class="line"></span><br><span class="line">        String loginedUser = SharedPreferencesUtil.getLoginedUser();</span><br><span class="line">        <span class="comment">// 如果记录用户名不为空，则说明已登录</span></span><br><span class="line">        <span class="keyword">boolean</span> isLogin = !TextUtils.isEmpty(loginedUser);</span><br><span class="line">        <span class="comment">// 判断是否登录</span></span><br><span class="line">        <span class="keyword">if</span> (!isLogin) &#123;</span><br><span class="line">            <span class="comment">// 未登录直接跳转到登录页面</span></span><br><span class="line">            Toast.makeText(context, <span class="string">"请先登录！"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(context, LoginActivity.class);</span><br><span class="line">            context.startActivity(intent);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果登录了，则执行原方法</span></span><br><span class="line">        <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上代码通过 @Pointcut（切入点） 和 @Around（通知） 形成了 一个 @Aspect（切面）。 这里需要注意，定义切入点时使用 execution 需要注意语法正确，否则会导致无法正确切入。</p><p>这样就使用 AspectJ 完成了一整套 集中式登录架构，接下来只需要在需要登录验证的方法前加上注解即可，相当于将登录验证从一个个纵向流程中横向给切了出来进行单独处理，可以减少了我们需要重复进行登录判断的冗余代码。  </p><p>我们还可以想一想，如果我们要用户的点击行为统计如何我们应当如何写呢？思路也是一样哈，定义连接点标示（自定义注解），新增切面类并在其中定义切入点和通知，在通知中做抽取的业务逻辑即可，在下面提供的源码地址中我也有实现哈，以供参考。</p><p>这就是 AOP 在 Android 中的应用，对于这个方法论你学会了吗？除此之外，你还有什么妙用吗？不妨实践一下。</p><p>源码链接：<a href="https://github.com/TYKevin/DemoAopInAndroid" target="_blank" rel="noopener">https://github.com/TYKevin/DemoAopInAndroid</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是AOP？&quot;&gt;&lt;a href=&quot;#什么是AOP？&quot; class=&quot;headerlink&quot; title=&quot;什么是AOP？&quot;&gt;&lt;/a&gt;什么是AOP？&lt;/h2&gt;&lt;p&gt;首先我们需要来了解下，什么是 AOP？AOP 全名是 Aspect Oriented Program
      
    
    </summary>
    
    
      <category term="android 进阶" scheme="http://TYKevin.github.io/tags/android-%E8%BF%9B%E9%98%B6/"/>
    
      <category term="android 架构" scheme="http://TYKevin.github.io/tags/android-%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>深度解析属性动画的思想 - 带你手动实现属性动画框架</title>
    <link href="http://TYKevin.github.io/2019/05/09/android/android-custom-object-animation/"/>
    <id>http://TYKevin.github.io/2019/05/09/android/android-custom-object-animation/</id>
    <published>2019-05-09T06:32:07.000Z</published>
    <updated>2019-10-26T14:49:02.079Z</updated>
    
    <content type="html"><![CDATA[<p>属性动画在我们日常使用频率也是比较多的，源码解析网上也是比较多的，但是很多同学表示在看源码的时候看的云里雾里，看到最后其实也并不能理解到源码架构的原理和精髓所在，所以我们这里脱开在源码里的纠缠，我带大家从参考源码的角度，如何设计一个精简版的属性动画框架，用以更好的理解属性动画源码设计的原理和思想。</p><h3 id="属性动画是什么？"><a href="#属性动画是什么？" class="headerlink" title="属性动画是什么？"></a>属性动画是什么？</h3><p>首先，我们既然要写一个属性动画，我们必然要了解属性动画究竟是个啥玩意儿？它能起到什么样的作用？</p><h5 id="动画的本质"><a href="#动画的本质" class="headerlink" title="动画的本质"></a>动画的本质</h5><p>在原先 Android 3.0 版本之前的定义上来说，Android的补间动画和逐帧动画都是对图片或View 进行动画。而 3.0 版本之后，Google 爸爸推出了 属性动画。 我们首先将这个词分拆开来，属性和动画，属性就是一个对象的属性，动画就是在一定时间内以一定的速度改变View（或一个对象） 的属性状态，包括但不限于View 的位置、大小、透明度等。</p><h5 id="属性动画和补间动画的区别？"><a href="#属性动画和补间动画的区别？" class="headerlink" title="属性动画和补间动画的区别？"></a>属性动画和补间动画的区别？</h5><p>在3.0之前，补间动画能够帮我们实现对View的移动、缩放、旋转和淡入淡出，但这也仅仅局限于继承自View对象。可能有的同学比较奇怪的是，除了View在显示上需要动画，其他还有什么场景下需要用到动画呢？比如在我们的自定义View控件中，如果我们在onDraw()方法中绘制了 Point，我们可以对这个 Point 对象的进行动画，又或者我只需要修改一个View的背景色的透明度，补间动画也只能望View兴叹。</p><p>其次我们在动画过程中，补间动画只能改变View显示的状态，并没有修改 View 真正的属性，比如我们将一个按钮从屏幕上方移动到了屏幕下方，但是你如果在动画完成后点击Button显示的区域，这时候你会发现，无法点击，因为按钮的坐标属性并未得到修改。</p><p>所以总而言之，属性动画也就是 可以对一个对象其中的属性进行动画操作，而不单单局限于View。这就是属性动画的核心思想。</p><h5 id="属性动画的使用"><a href="#属性动画的使用" class="headerlink" title="属性动画的使用"></a>属性动画的使用</h5><p>古话说的好，要知其然，也要知其所以然。那我们在知其所以然之前，首先知其然。看看属性动画如何调用。</p><p>我们举个最简单的例子，在将一个TextView横向缩放到1.5倍大小。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TextView tvTip = findViewById(R.id.tv_tip);</span><br><span class="line">ObjectAnimator objectAnimator = ObjectAnimator</span><br><span class="line">                .ofFloat(tvTip, <span class="string">"scaleX"</span>, <span class="number">1f</span>, <span class="number">1.5f</span>);</span><br><span class="line">objectAnimator.start();</span><br></pre></td></tr></table></figure><p>这就是属性动画最简单的调用方法了，我们在这里也可以完全看到刚刚说的属性动画的定义: 针对 <code>tvTip</code>属性 <code>scaleX</code>从1倍缩放到1.5倍。</p><h3 id="自行设计一个属性动画框架"><a href="#自行设计一个属性动画框架" class="headerlink" title="自行设计一个属性动画框架"></a>自行设计一个属性动画框架</h3><p>下面我们就来仿照 Android 源码里的属性动画的实现，来自行实现一个简单版本的属性动画，让我们更好的理解属性动画运作的原理。</p><h5 id="设计一个动画框架，我们需要考虑哪些因素？"><a href="#设计一个动画框架，我们需要考虑哪些因素？" class="headerlink" title="设计一个动画框架，我们需要考虑哪些因素？"></a>设计一个动画框架，我们需要考虑哪些因素？</h5><ol><li>首先，要考虑到调用API的简洁易用性，应该说越简单直接越好</li><li>每个View（对象）可以有很多个动画，但同时只有一个动画在运行</li><li>因为动画执行的过程中需要时间来完成，动画的执行不能依赖自身的for循环代码，这样会造成极大的资源损耗</li><li>如何让动画平滑的动起来？</li></ol><h5 id="开始我们的设计之旅"><a href="#开始我们的设计之旅" class="headerlink" title="开始我们的设计之旅"></a>开始我们的设计之旅</h5><p>带着这些问题，我们开始来自行设计一个属性动画框架。</p><h6 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h6><p>首先，我们需要考虑一个动画任务包含哪些元素？</p><ol><li>对象本身，大部分情况下都是View</li><li>动画时长</li><li>动画的起始值和结束值</li><li>动画运行的速度效果，也就是我们所熟知的插值器</li></ol><p>其次，我们需要先了解到几个重要概念：</p><ol><li><p>关键帧</p><p>在动画运行之前，我们会将一个动画任务分解成若干个关键帧。这也就类似于我们需要规划从南京到上海，中间需要规划大致什么时间经过常州、无锡、苏州，初步估算后经过多久能够到达上海。</p><p>动画也是这样，需要时间去完成，而在开始之前，我们需要将这个动画分拆到不同的时间节点的状态，有了目标，才能有方向，这就是关键帧。</p></li><li><p>插值器：TimeInterpolator</p><p>时间插值器，作用是根据时间节点的不同计算出当前属性改变的百分比，例举几个常用的插值器：LinearInterpolator(线性插值器)、AccelerateDecelerateInterpolator(加速减速插值器)、DecelerateInterpolator(减速插值器)。</p><p>依然用南京到上海的例子，我们计划4小时从南京开到上海，如果是线性插值器，则以匀速的速度从南京到达上海。如果是使用减速插值器，则南京出发后，因为就以高速驾驶，距离上海越近则开的越慢。</p></li><li><p>估值器：TypeEvaluator</p><p>不论怎么样，我们终究是通过改变对象的属性值去完成动画，而设置属性值则是一个具体的数值。所以估值器的作用就是根据插值器计算当前时间节点改变的百分比去计算出最终的具体改变的属性值。</p></li></ol><p>我们仿照源码中的属性动画的原理，搭建了我们自己的属性动画架构：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws2.sinaimg.cn/large/006tNc79gy1g2xkvrjptnj30p80k7di0.jpg" alt="大致的流程架构图（画的丑请见谅）" title>                </div>                <div class="image-caption">大致的流程架构图（画的丑请见谅）</div>            </figure><ol><li>首先，在我们初始化一个动画任务<code>MyObjectAnimator</code>的时候，会去生成一个属性设置助理 <code>MyFloatPropertyValuesHolder</code> ，用于管理我们需要去设置的属性值和关键帧。而 <code>MyFloatPropertyValuesHolder</code> 会去生成关键帧管理类<code>MyKeyframeSet</code>, 并在开始之前生成若干关键帧<code>MyFloatKeyframe</code>。</li><li>当动画任务开始后，在系统中，会在属性动画中通过监听 VSync 信号，进行动画触发，我们这里会使用<code>VSYNCManager</code> 模拟VSync 信号，并在动画开始时，添加监听。</li><li>当在动画任务中监听到VSync 信号后，我们将通过执行次数以及插值器计算到当前的百分比，并将其传入<code>MyFloatPropertyValuesHolder</code>通过关键帧管理类<code>MyKeyframeSet</code>计算到最终此时此刻需要设置的属性值,并设置。</li><li>当动画完成后，动画任务类<code>MyFloatPropertyValuesHolder</code> 会重置当前执行的状态，并根据动画是否重复，清空对 VSync 信号的监听。</li></ol><p>这就是一套完整的执行流程，可能有的同学看到这，还是一头雾水，这究竟是个什么流程，不要紧，下面我们 Show your the code，用代码理清思路。</p><h6 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h6><ol><li><p>首先是初始化一个动画任务<code>MyObjectAnimator</code>，这里和原生属性动画的初始化无差。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化一个我们自己写的动画任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyObjectAnimator objectAnimator = MyObjectAnimator</span><br><span class="line">                .ofFloat(tv_tip, <span class="string">"scaleX"</span>, <span class="number">1f</span>, <span class="number">2f</span>);</span><br><span class="line">objectAnimator.setDuration(<span class="number">500</span>);</span><br><span class="line">objectAnimator.setRepeat(<span class="keyword">false</span>);</span><br><span class="line">objectAnimator.setTimeInterpolator(<span class="keyword">new</span> LineInterpolator());</span><br><span class="line">objectAnimator.start();</span><br></pre></td></tr></table></figure></li><li><p>新建<code>MyObjectAnimator</code>类，并在<code>MyObjectAnimator.ofFloat()</code>方法中实现对<code>MyObjectAnimator</code> 的初始化，以及对插值器，时长和重复Flag 的设置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动画任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyObjectAnimator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前操作对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> WeakReference&lt;Object&gt; target;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否重复</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> repeat = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 运行时长</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mDuration = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 差值器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TimeInterpolator timeInterpolator;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动画助理，用于设置属性值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> MyFloatPropertyValuesHolder myFloatPropertyValuesHolder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 初始化动画属性助理 MyFloatPropertyValuesHolder，用于设置参数，并将动画进行分解成N个关键帧，</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target       动画对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> propertyName 需要修改的属性名, View 中的属性名且必须有对应 setter 和 getter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values       关键帧的节点参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyObjectAnimator</span><span class="params">(Object target, String propertyName, <span class="keyword">float</span>... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = <span class="keyword">new</span> WeakReference&lt;&gt;(target);</span><br><span class="line">        myFloatPropertyValuesHolder = <span class="keyword">new</span> MyFloatPropertyValuesHolder(propertyName, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化动画任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> propertyName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyObjectAnimator <span class="title">ofFloat</span><span class="params">(Object target, String propertyName, <span class="keyword">float</span>... values)</span> </span>&#123;</span><br><span class="line">        MyObjectAnimator anim = <span class="keyword">new</span> MyObjectAnimator(target, propertyName, values);</span><br><span class="line">        <span class="keyword">return</span> anim;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置时间插值器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeInterpolator</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimeInterpolator</span><span class="params">(TimeInterpolator timeInterpolator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.timeInterpolator = timeInterpolator;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置是否重复</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> repeat</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRepeat</span><span class="params">(<span class="keyword">boolean</span> repeat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.repeat = repeat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置时长</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> duration</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDuration</span><span class="params">(<span class="keyword">long</span> duration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mDuration = duration;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动动画</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 第6步 进行实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>下面我们新建动画属性助理类<code>MyFloatPropertyValuesHolder</code>, 并完成构造方法，构造方法中，会根据需要修改的属性名生成对应的 Setter 方法，所以在我们的属性动画中，传入的属性名必须是在所属对象类中有对应的Setter方法才行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动画 属性"助理"</span></span><br><span class="line"><span class="comment"> * 【对应源码里 PropertyHolder】</span></span><br><span class="line"><span class="comment"> * 用于对当前对象进行设值，反射设置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFloatPropertyValuesHolder</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String mPropertyName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * float 类型 Class</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class mValueType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关键帧管理类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MyKeyframeSet myKeyframeSet;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置属性的 Setter 方法，通过反射方法Object.class.getMethod()方法生成</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"> Method mSetter = <span class="keyword">null</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法</span></span><br><span class="line"><span class="comment">     * 初始化关键帧管理类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> propertyName 属性名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 关键帧节点属性参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFloatPropertyValuesHolder</span><span class="params">(String propertyName, <span class="keyword">float</span>... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mPropertyName = propertyName;</span><br><span class="line">        mValueType = <span class="keyword">float</span>.class;</span><br><span class="line">        myKeyframeSet = MyKeyframeSet.ofFloat(values);</span><br><span class="line">      </span><br><span class="line">       setupSetter();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过反射方法 Object.class.getMethod()方法生成对应的Setter方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setupSetter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取对应属性的 Setter</span></span><br><span class="line">        <span class="keyword">char</span> firstLetter = Character.toUpperCase(mPropertyName.charAt(<span class="number">0</span>));</span><br><span class="line">        String theRest = mPropertyName.substring(<span class="number">1</span>);</span><br><span class="line">        String methodName = <span class="string">"set"</span> + firstLetter + theRest;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mSetter = View.class.getMethod(methodName, <span class="keyword">float</span>.class);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建关键帧管理类<code>MyKeyframeSet</code>，并实现<code>MyKeyframeSet.ofFloat(values)</code>方法，这一步非常重要，重磅人物 关键帧 就是在这里 通过遍历传入的节点参数被初始化出来，保存在List中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关键帧管理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyKeyframeSet</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一个关键帧</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MyFloatKeyframe mFirstKeyframe;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 帧队列，mFirstKeyframe 其实就是第0个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;MyFloatKeyframe&gt; myFloatKeyframes;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类型估值器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 相当于差速器，用在关键帧中间穿插，进行不同速度的处理。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TypeEvaluator mTypeEvaluator;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的节点参数，生成关键帧数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyKeyframeSet <span class="title">ofFloat</span><span class="params">(<span class="keyword">float</span>... values)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 总共有多少关键帧节点</span></span><br><span class="line">        <span class="keyword">int</span> frameCount = values.length;</span><br><span class="line">        <span class="comment">// 遍历关键帧参数，并生成关键帧</span></span><br><span class="line">        MyFloatKeyframe[] myFloatKeyframes = <span class="keyword">new</span> MyFloatKeyframe[frameCount];</span><br><span class="line">        myFloatKeyframes[<span class="number">0</span>] = <span class="keyword">new</span> MyFloatKeyframe(<span class="number">0</span>, values[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">// 遍历关键帧节点数量，并计算关键帧处于的百分比，初始化对应的关键帧</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; frameCount; ++i) &#123;</span><br><span class="line">            myFloatKeyframes[i] = <span class="keyword">new</span> MyFloatKeyframe((<span class="keyword">float</span>) i / (frameCount - <span class="number">1</span>), values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyKeyframeSet(myFloatKeyframes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 构造函数</span></span><br><span class="line"><span class="comment">      * 初始化传入的关键帧数组，以及估值器</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> keyframes</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">MyKeyframeSet</span><span class="params">(MyFloatKeyframe... keyframes)</span> </span>&#123;</span><br><span class="line">         myFloatKeyframes = Arrays.asList(keyframes);</span><br><span class="line">         mFirstKeyframe = keyframes[<span class="number">0</span>];</span><br><span class="line">         <span class="comment">// 这里直接使用Android原生的 Float类型估值器，android.animation.FloatEvaluator</span></span><br><span class="line">         mTypeEvaluator = <span class="keyword">new</span> FloatEvaluator();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建关键帧实体类: <code>MyFloatKeyframe</code>，用于保存某一时刻的关键帧的状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关键帧 </span></span><br><span class="line"><span class="comment"> * 保存某一时刻的具体状态</span></span><br><span class="line"><span class="comment"> * ps. 初始化动画任务的时候已经完成初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFloatKeyframe</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前的帧所处的百分比， 范围 0 - 1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">float</span> mFraction;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每一个关键帧，具体设置的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">float</span> mValue;</span><br><span class="line"></span><br><span class="line">    Class mValueType;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFloatKeyframe</span><span class="params">(<span class="keyword">float</span> mFraction, <span class="keyword">float</span> mValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mFraction = mFraction;</span><br><span class="line">        <span class="keyword">this</span>.mValue = mValue;</span><br><span class="line">        <span class="keyword">this</span>.mValueType = <span class="keyword">float</span>.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getFraction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mFraction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建线性插值器类<code>LineInterpolator</code>, 并使其实现<code>TimeInterpolator</code> 接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线性插值器</span></span><br><span class="line"><span class="comment"> * 因为是线性运动，所以则传入百分比及输出百分比</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LineInterpolator</span> <span class="keyword">implements</span> <span class="title">TimeInterpolator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TimeInterpolator</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间差值器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 实现此接口用于修改执行百分比，以修改运行时的状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeInterpolator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>到这里为止，我们已经完成了对属性动画的初始化工作，初始化 动画任务类 MyObjectAnimator<code>后，通过初始化出来的动画属性助理</code>MyFloatPropertyValuesHolder又初始化了 关键帧管理类<code>MyKeyframeSet</code>,  并通过传入的关键帧参数生成了关键帧数组保存在了<code>MyKeyframeSet</code>中。</p><p>以上几步，就是在阐述<code>MyObjectAnimator.ofFloat(tv_tip, &quot;scaleY&quot;, 1f, 2f);</code> 背后发生的故事，下面我们说一说 <code>objectAnimator.start()</code>执行后又发生了什么。</p></blockquote></li><li><p>现在我们回到<code>MyObjectAnimator</code>类中的<code>start()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 启动动画</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 注册监听</span></span><br><span class="line">     VSYNCManager.getInstance().addCallbacks(<span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>你会发现这里仅仅设置了一个监听事件，那么这个监听事件里发生了什么？</p><p>我们前面有提到，在原生属性方法中，动画运动是通过监听 VSync信号机制类监听的，但是在我们第三方APP 中，无法监听VSync信号，所以，我们写了一个 <code>VSYNCManager</code> 用来模拟这个信号，信号每16ms发出一次（至于为什么，可以自行搜索 Android VSync信号）: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟 VSync 信号</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 代码中使用线程模拟VSync信号，因为在第三方中无法监听到 VSync 信号。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VSYNCManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> VSYNCManager mInstance = <span class="keyword">new</span> VSYNCManager();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;AnimationFrameCallback&gt; callbacks = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> VSYNCManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法，启动模拟VSYNC 信号的线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">VSYNCManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(runnable).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加监听</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> callback</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCallbacks</span><span class="params">(AnimationFrameCallback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (callback == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        callbacks.add(callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除监听</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> callback</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeCallbacks</span><span class="params">(AnimationFrameCallback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (callback == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        callbacks.remove(callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟VSYNC信号，信号每16ms 发出一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 60Hz（16ms）绘制一次</span></span><br><span class="line">                    Thread.sleep(<span class="number">16</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 模拟 VSync 信号</span></span><br><span class="line">                <span class="keyword">for</span>(AnimationFrameCallback callback:callbacks) &#123;</span><br><span class="line">                    callback.doAnimationFrame(System.currentTimeMillis());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 信号监听的方法，当有信号传递的时候，进行回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AnimationFrameCallback</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">doAnimationFrame</span><span class="params">(<span class="keyword">long</span> currentTime)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="7"><li><p>既然上一步在<code>MyObjectAnimation</code>类的 <code>start()</code>方法中，调用了<code>VSYNCManager.getInstance().addCallbacks(this)</code>，那么我们应该很轻易的想到，将<code>MyObjectAnimation</code>类实现 <code>VSYNCManager.AnimationFrameCallback</code>接口，以在<code>doAnimationFrame(long currentTime)</code> 方法中监听到 模拟 VSync信号。</p></li><li><p>在<code>MyObjectAnimation</code>类中实现<code>doAnimationFrame(long currentTime)</code>方法，这里就是让动画动起来的精髓所在。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 每隔16ms 会收到信号回调，并进行对应的属性设值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> currentTime</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doAnimationFrame</span><span class="params">(<span class="keyword">long</span> currentTime)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获得到 VSync 信号, 开始属性动画</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得应该被执行的总次数</span></span><br><span class="line">    <span class="keyword">float</span> total = mDuration / <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算当前执行百分比（index++）/total</span></span><br><span class="line">    <span class="keyword">float</span> fraction = (index++) / total;</span><br><span class="line">    <span class="keyword">if</span> (timeInterpolator != <span class="keyword">null</span>) &#123;</span><br><span class="line">        fraction = timeInterpolator.getInterpolation(fraction);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否重复播放</span></span><br><span class="line">    <span class="keyword">if</span> (index &gt;= total) &#123;</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!repeat) &#123;</span><br><span class="line">            <span class="comment">// 不重复，移除监听</span></span><br><span class="line">            VSYNCManager.getInstance().removeCallbacks(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 动画属性助理 设置 对应属性值，以完成动画操作</span></span><br><span class="line">    myFloatPropertyValuesHolder.setAnimatedValue(target.get(), fraction);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们会通过总时长除以信号间隔时间16ms，得到执行的总次数，在通过当前执行的次数以及总次数，就得到了当前执行的默认百分比，如果设置了插值器，则会通过插值器计算以当前预设的运行速度的运行百分比，并将这个 百分比和需要设置的对象 一并传入 动画属性助理中进行最终设值。</p></li><li><p>在<code>MyFloatPropertyValuesHolder</code> 添加 <code>setAnimatedValue(Object target, float fraction)</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimatedValue</span><span class="params">(Object target, <span class="keyword">float</span> fraction)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过当前的值 以及 执行百分比 计算出 需要修改的值</span></span><br><span class="line">    Object value = myKeyframeSet.getValue(fraction);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mSetter.invoke(target, value);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到在这个方法中，我们调用了 关键帧管理类的<code>myKeyframeSet.getValue(fraction)</code>方法，这个方法为整个属性动画中的重中之重（划重点）。</p><p>在这个方法中，使用估值器计算，如果当前运行百分比在这两帧中间，则将当前百分比的上下关键帧的对应参数和当前运行百分比传入估值器，得到当前百分比所对应的数值。还是拿南京到上海举例，我们之前计划南京到上海中间有三个关键停靠站常州、无锡、苏州，当我们到达镇江（南京和常州中间的城市）的时候，需要计算我们当前行驶了多少公里，那我们就需要将我们当前行驶的百分比和南京的在行程中相对距离（0km）以及常州的在行程中相对距离传入 <code>估值器</code>，则可以得到我们当前的行驶距离。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过传入的百分比，计算最终需要设置的具体属性值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fraction</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">(<span class="keyword">float</span> fraction)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 关键帧之间 的位置 根据执行时间，进行计算状态</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先拿到第一帧</span></span><br><span class="line">    MyFloatKeyframe prevKeyframe = mFirstKeyframe;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有关键帧</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; myFloatKeyframes.size(); ++i) &#123;</span><br><span class="line">        <span class="comment">// 下一帧</span></span><br><span class="line">        MyFloatKeyframe nextKeyframe = myFloatKeyframes.get(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 【关键】每个关键帧与关键帧之间动画状态的计算（公式见 方法中）</span></span><br><span class="line">        <span class="comment">// 使用估值器计算，如果当前运行百分比在这两帧中间，则将当前百分比的上下关键帧的对应参数和当前运行百分比传入估值器，得到当前百分比所对应的数值</span></span><br><span class="line">        <span class="keyword">if</span> (fraction &lt; nextKeyframe.getFraction()) &#123;</span><br><span class="line">            <span class="keyword">return</span> mTypeEvaluator.evaluate(fraction, prevKeyframe.getValue(), nextKeyframe.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        prevKeyframe = nextKeyframe;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们通过<code>getValue(float fraction)</code>方法运算得到当前运行百分比对应的具体的属性数值之后，则通过之前初始化的Setter方法，通过反射调用 invoke，则对具体属性设置成功，这样就完成了动画中的一帧运行。</p><p>当我们的信号每16ms传递一次出来的时候，就会进行一帧动画的运转，也就是对应的属性值的设置。当运行次数达到总次数之后，我们会重置运行次数，如果动画不重复，则对VSync信号移除监听即可。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过复原一次简单的属性动画，我们可以深刻了解到属性动画背后的思想以及运转原理，当懂得其背后的原理之后，我相信看源码时也不会迷失其中，而且对于源码理解也会更加深刻。</p><p>源码地址：<a href="https://github.com/TYKevin/CustomObjcctAnimation" target="_blank" rel="noopener">https://github.com/TYKevin/CustomObjcctAnimation</a></p><p>最后，如果喜欢我的文章，请扫码关注公众号，当有新文章时，可以及时收到哦。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws3.sinaimg.cn/large/006tNc79gy1g2xlzxgcgaj31ej0goait.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;属性动画在我们日常使用频率也是比较多的，源码解析网上也是比较多的，但是很多同学表示在看源码的时候看的云里雾里，看到最后其实也并不能理解到源码架构的原理和精髓所在，所以我们这里脱开在源码里的纠缠，我带大家从参考源码的角度，如何设计一个精简版的属性动画框架，用以更好的理解属性动
      
    
    </summary>
    
    
      <category term="android 进阶" scheme="http://TYKevin.github.io/tags/android-%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
</feed>
